const OpenAI = require('openai');

class OpenAIService {
    constructor() {
        this.openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY || 'sk-placeholder'
        });
        
        this.systemPrompt = `Eres un asistente especializado en el estudio de investigaci√≥n EPIMex (Arquitectura gen√©tica de la psicosis de inicio temprano en mexicanos).

CARACTER√çSTICAS DE TU PERSONALIDAD:
- Emp√°tico y comprensivo
- Profesional pero c√°lido
- Claro y directo
- Respetuoso de la confidencialidad
- Sensible a temas de salud mental

INFORMACI√ìN DEL ESTUDIO:
EPIMex busca entender las causas gen√©ticas, neuropsicol√≥gicas y socioemocionales de la psicosis de inicio temprano en poblaci√≥n mexicana. Se analizan factores biol√≥gicos, psicol√≥gicos y sociales mediante entrevistas cl√≠nicas, pruebas cognitivas y recolecci√≥n de muestras biol√≥gicas.

SEDES:
- Benito Ju√°rez: Grupo M√©dico Carracci, Carracci 107, Col. Extremadura Insurgentes
- Tlalpan: Hospital Psiqui√°trico Infantil Dr. Juan N. Navarro, Av. San Fernando 86

CONTACTOS:
- Email: EPIMex@gmc.org.mx
- WhatsApp Benito Ju√°rez: 55 3206 7976
- WhatsApp Tlalpan: 55 7871 0328
- Web: www.epimex.net

INSTRUCCIONES IMPORTANTES:
1. Mant√©n las respuestas concisas pero completas (m√°ximo 200 palabras)
2. Usa un tono emp√°tico especialmente cuando se hablen de s√≠ntomas o experiencias dif√≠ciles
3. Siempre mant√©n la informaci√≥n cient√≠fica precisa
4. Adapta el lenguaje a la edad del participante
5. Si no tienes informaci√≥n espec√≠fica, deriva al equipo especializado
6. Nunca diagnostiques ni des consejos m√©dicos
7. Respeta la confidencialidad en todo momento

EJEMPLOS DE RESPUESTAS:
- Para j√≥venes: Usa lenguaje m√°s directo y cercano
- Para adultos: Mant√©n formalidad profesional
- Para temas sensibles: Muestra empat√≠a y comprensi√≥n
- Para dudas t√©cnicas: Explica de manera simple pero precisa`;
    }

    async generarRespuesta(contexto, mensajeUsuario, tipoRespuesta = 'general') {
        try {
            let promptEspecifico = this.systemPrompt;
            
            // Adaptar prompt seg√∫n el tipo de respuesta
            switch (tipoRespuesta) {
                case 'tamizaje':
                    promptEspecifico += `\n\nEST√ÅS EN PROCESO DE TAMIZAJE:
- Haz la pregunta de manera emp√°tica y clara
- Si la respuesta no es clara, pide clarificaci√≥n amablemente
- Agradece la honestidad del participante
- Mant√©n un tono profesional pero c√°lido`;
                    break;
                    
                case 'psicosis_seguimiento':
                    promptEspecifico += `\n\nEST√ÅS EVALUANDO EXPERIENCIAS SENSIBLES:
- Usa un tono muy emp√°tico y sin juicio
- Normaliza las experiencias ("muchas personas han tenido...")
- Agradece la confianza al compartir
- Asegura confidencialidad
- No uses t√©rminos m√©dicos complejos`;
                    break;
                    
                case 'clasificacion':
                    promptEspecifico += `\n\nEST√ÅS COMUNICANDO RESULTADOS:
- S√© positivo y alentador
- Explica los pr√≥ximos pasos claramente
- Mant√©n expectativas realistas
- Ofrece apoyo y contacto directo`;
                    break;
                    
                case 'agendamiento':
                    promptEspecifico += `\n\nEST√ÅS AYUDANDO CON AGENDAMIENTO:
- S√© eficiente pero amable
- Confirma informaci√≥n importante
- Explica el proceso claramente
- Ofrece flexibilidad cuando sea posible`;
                    break;
            }

            const messages = [
                { role: 'system', content: promptEspecifico },
                { role: 'user', content: `Contexto: ${contexto}\n\nMensaje del usuario: ${mensajeUsuario}` }
            ];

            const completion = await this.openai.chat.completions.create({
                model: process.env.OPENAI_MODEL || 'gpt-4',
                messages: messages,
                max_tokens: 300,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            });

            return completion.choices[0].message.content.trim();
            
        } catch (error) {
            console.error('Error en OpenAI:', error);
            
            // Respuestas de fallback seg√∫n el tipo
            const fallbackResponses = {
                general: "Gracias por tu mensaje. Nuestro equipo est√° disponible para ayudarte con cualquier pregunta sobre EPIMex.",
                tamizaje: "Entiendo tu respuesta. Continuemos con el siguiente paso del proceso.",
                psicosis_seguimiento: "Agradezco que compartas esta informaci√≥n conmigo. Es importante para el estudio.",
                clasificacion: "Hemos registrado tu informaci√≥n. Te contactaremos pronto con los siguientes pasos.",
                agendamiento: "Perfecto, procederemos con el agendamiento de tu cita."
            };
            
            return fallbackResponses[tipoRespuesta] || fallbackResponses.general;
        }
    }

    async reformularPregunta(preguntaOriginal, contextoParticipante) {
        try {
            const prompt = `Reformula esta pregunta de tamizaje para que sea m√°s natural y emp√°tica, considerando el contexto del participante:

Pregunta original: "${preguntaOriginal}"
Contexto del participante: ${contextoParticipante}

Instrucciones:
- Mant√©n el contenido cient√≠fico exacto
- Hazla m√°s conversacional y menos formal
- Adapta el tono a la edad y situaci√≥n
- M√°ximo 100 palabras
- Incluye una breve explicaci√≥n del por qu√© es importante si es necesario`;

            const completion = await this.openai.chat.completions.create({
                model: process.env.OPENAI_MODEL || 'gpt-4',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 150,
                temperature: 0.8
            });

            return completion.choices[0].message.content.trim();
            
        } catch (error) {
            console.error('Error reformulando pregunta:', error);
            return preguntaOriginal; // Devolver pregunta original si falla
        }
    }

    async generarMensajeClasificacion(clasificacion, datosParticipante) {
        try {
            const prompt = `Genera un mensaje emp√°tico y profesional para comunicar el resultado del tamizaje:

Clasificaci√≥n: ${clasificacion.tipo}
Elegible: ${clasificacion.elegible ? 'S√≠' : 'No'}
Criterios cumplidos: ${clasificacion.criteriosCumplidos.join(', ')}
${clasificacion.criteriosFaltantes.length > 0 ? `Criterios faltantes: ${clasificacion.criteriosFaltantes.join(', ')}` : ''}

Participante: ${datosParticipante.nombre}, ${datosParticipante.edad} a√±os

Instrucciones:
- Si es elegible: S√© positivo y explica pr√≥ximos pasos
- Si no es elegible: S√© emp√°tico y agradece la participaci√≥n
- Mant√©n un tono profesional pero c√°lido
- M√°ximo 150 palabras
- No uses t√©rminos t√©cnicos como "probando", "control", etc.
- Enf√≥cate en la contribuci√≥n al estudio`;

            const completion = await this.openai.chat.completions.create({
                model: process.env.OPENAI_MODEL || 'gpt-4',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 200,
                temperature: 0.7
            });

            return completion.choices[0].message.content.trim();
            
        } catch (error) {
            console.error('Error generando mensaje de clasificaci√≥n:', error);
            
            // Mensaje de fallback
            if (clasificacion.elegible) {
                return `¬°Gracias ${datosParticipante.nombre}! Has completado el tamizaje inicial para EPIMex. Tu informaci√≥n ser√° revisada por nuestro equipo y te contactaremos pronto para coordinar los siguientes pasos. ¬°Agradecemos mucho tu inter√©s en contribuir a esta importante investigaci√≥n!`;
            } else {
                return `Gracias ${datosParticipante.nombre} por tu tiempo e inter√©s en EPIMex. Aunque en este momento no cumples todos los criterios para participar, valoramos mucho tu disposici√≥n a contribuir a la investigaci√≥n en salud mental. Si tienes preguntas, no dudes en contactarnos.`;
            }
        }
    }

    async generarRecordatorio(tipoRecordatorio, datosParticipante, datosCita = null) {
        try {
            let prompt = `Genera un recordatorio ${tipoRecordatorio} para EPIMex:

Participante: ${datosParticipante.nombre}
Tipo de recordatorio: ${tipoRecordatorio}`;

            if (datosCita) {
                prompt += `
Fecha de cita: ${datosCita.fecha_cita}
Hora: ${datosCita.hora_cita}
Sede: ${datosCita.sede}`;
            }

            prompt += `

Instrucciones:
- Tono amigable y profesional
- Incluye emojis apropiados
- M√°ximo 100 palabras
- Incluye informaci√≥n de contacto si es necesario`;

            const completion = await this.openai.chat.completions.create({
                model: process.env.OPENAI_MODEL || 'gpt-4',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 150,
                temperature: 0.8
            });

            return completion.choices[0].message.content.trim();
            
        } catch (error) {
            console.error('Error generando recordatorio:', error);
            
            // Recordatorios de fallback
            const fallbacks = {
                cita: `¬°Hola ${datosParticipante.nombre}! üëã Te recordamos tu cita para EPIMex ma√±ana. ¬°Te esperamos!`,
                seguimiento: `Hola ${datosParticipante.nombre}, ¬øsigues interesado/a en participar en EPIMex? Estamos aqu√≠ para ayudarte.`,
                participacion: `¬°Hola ${datosParticipante.nombre}! ¬øTe gustar√≠a conocer m√°s sobre EPIMex? Podemos resolver tus dudas.`
            };
            
            return fallbacks[tipoRecordatorio] || fallbacks.participacion;
        }
    }

    // M√©todo para detectar intenci√≥n del usuario
    async detectarIntencion(mensaje) {
        try {
            const prompt = `Analiza este mensaje y determina la intenci√≥n del usuario en el contexto del estudio EPIMex:

Mensaje: "${mensaje}"

Posibles intenciones:
- saludo: Saludos iniciales
- informacion: Quiere informaci√≥n sobre el estudio
- participar: Quiere participar o agendar
- dudas: Tiene preguntas espec√≠ficas
- confirmacion: Confirma algo (cita, participaci√≥n)
- cancelacion: Quiere cancelar algo
- resultados: Pregunta por resultados
- otro: Otra intenci√≥n

Responde solo con la intenci√≥n detectada.`;

            const completion = await this.openai.chat.completions.create({
                model: process.env.OPENAI_MODEL || 'gpt-4',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 20,
                temperature: 0.3
            });

            return completion.choices[0].message.content.trim().toLowerCase();
            
        } catch (error) {
            console.error('Error detectando intenci√≥n:', error);
            return 'otro';
        }
    }

    // M√©todo para validar respuestas complejas
    async validarRespuestaCompleja(pregunta, respuesta) {
        try {
            const prompt = `Eval√∫a si esta respuesta es adecuada para la pregunta del tamizaje:

Pregunta: "${pregunta}"
Respuesta: "${respuesta}"

Eval√∫a:
1. ¬øLa respuesta es relevante a la pregunta?
2. ¬øContiene informaci√≥n suficiente?
3. ¬øNecesita clarificaci√≥n?

Responde en formato JSON:
{
  "esAdecuada": true/false,
  "necesitaClarificacion": true/false,
  "sugerenciaClarificacion": "texto o null"
}`;

            const completion = await this.openai.chat.completions.create({
                model: process.env.OPENAI_MODEL || 'gpt-4',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 100,
                temperature: 0.3
            });

            return JSON.parse(completion.choices[0].message.content.trim());
            
        } catch (error) {
            console.error('Error validando respuesta compleja:', error);
            return {
                esAdecuada: true,
                necesitaClarificacion: false,
                sugerenciaClarificacion: null
            };
        }
    }
}

module.exports = OpenAIService;

